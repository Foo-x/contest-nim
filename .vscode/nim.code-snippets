{
  // Place your contest ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "template": {
    "scope": "nim",
    "prefix": "template",
    "body": [
      "import strformat, macros, algorithm, tables, sets, lists,",
      "    intsets, critbits, sequtils, strutils, math, times, sugar",
      "",
      "template stopwatch(body) = (let t1 = cpuTime(); body; stderr.writeLine \"TIME:\",",
      "    (cpuTime() - t1) * 1000, \"ms\")",
      "template loop(n: int, body) = (for _ in 0..<n: body)",
      "template `max=`(x, y) = x = max(x, y)",
      "template `min=`(x, y) = x = min(x, y)",
      "",
      "let readNext = iterator(getsChar: bool = false): string {.closure.} =",
      "  for s in stdin.readAll.split:",
      "    if getsChar:",
      "      for i in 0..<s.len():",
      "        yield s[i..i]",
      "    else:",
      "      yield s",
      "",
      "proc read(t: typedesc[string]): string = readNext()",
      "proc read(t: typedesc[char]): char = readNext(true)[0]",
      "proc read(t: typedesc[int]): int = readNext().parseInt",
      "",
      "macro read(t: typedesc, n: varargs[int]): untyped =",
      "  var repStr = \"\"",
      "  for arg in n:",
      "    repStr &= &\"({arg.repr}).newSeqWith \"",
      "  parseExpr(&\"{repStr}read({t})\")",
      "",
      "",
      "when isMainModule:",
      "  "
    ]
  }
}
